#!/usr/bin/env python3
# generates directory tree example using graphviz

import sys
import os.path as osp
import pygraphviz as pgv
sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from lrgasp.types import Challenge

# directory names are both name and label, files are labels, with unique
# names generate from parent

ENTRY_MD = "entry.json"
EXPERIMENT_MD = "experiment.json"

ENTRY_A = "entry_A\n(" + str(Challenge.iso_detect_finished) + ")"
ENTRY_B = "entry_B\n(" + str(Challenge.iso_quant) + ")"

MOD_HS = "mod_hs"
MOD_HS_MODELS =  "models.gtf.gz"
MOD_HS_READ_MODEL_MAP =  "read_model_map.tsv.gz"

MOD_MM = "mod_mm"
MOD_MM_MODELS = "models.gtf.gz"
MOD_MM_READ_MODEL_MAP =  "read_model_map.tsv.gz"

EXP_HS = "exp_hs"
EXP_HS_MATRIX = "expression.tsv.gz"

EXP_MM = "exp_mm"
EXP_MM_MATRIX = "expression.tsv.gz"

ENTRY_COLOR = "orange"
EXPERIMENT_COLOR = "mediumspringgreen"
DATA_FILE_COLOR = "lightskyblue"
METADATA_COLOR = "powderblue"

def add_dir(g, parent, label, color):
    name = parent + '/' + label
    g.add_node(name, shape='folder', label=label, style="filled", fillcolor=color)
    if parent is not None:
        g.add_edge(parent, name)
    return name

def add_file(g, parent, label, color):
    name = parent + '/' + label
    g.add_node(name, shape='rect', label=label, style="filled", fillcolor=color)
    g.add_edge(parent, name)

def add_entry(g, name):
    g.add_node(name, shape='folder', style="filled", fillcolor=ENTRY_COLOR,
               width=1.8)
    add_file(g, name, ENTRY_MD, METADATA_COLOR)
    return name

def add_experiment(g, parent, label, data_files):
    name = parent + '/' + label
    node = add_dir(g, parent, label, EXPERIMENT_COLOR)
    add_file(g, node, EXPERIMENT_MD, METADATA_COLOR)
    for data_file in data_files:
        add_file(g, node, data_file, DATA_FILE_COLOR)
    return name

def add_model_link(g, expr, mod):
    pass

def build_entry_a(g):
    add_entry(g, ENTRY_A)
    add_experiment(g, ENTRY_A, MOD_HS,
                   (MOD_HS_MODELS, MOD_HS_READ_MODEL_MAP))
    add_experiment(g, ENTRY_A, MOD_MM,
                   (MOD_MM_MODELS, MOD_MM_READ_MODEL_MAP))

def build_entry_b(g):
    add_entry(g, ENTRY_B)
    n = add_experiment(g, ENTRY_B, EXP_HS,
                       (EXP_HS_MATRIX,))
    add_model_link(g, n, MOD_HS)
    n = add_experiment(g, ENTRY_B, EXP_MM,
                       (EXP_MM_MATRIX,))
    add_model_link(g, n, MOD_MM)

def build_tree(g):
    build_entry_b(g)
    build_entry_a(g)


def mk_graph():
    g = pgv.AGraph()
    build_tree(g)
    g.draw("submit_tree.png", prog="dot", args="-Grankdir=LR")

mk_graph()
