#!/usr/bin/env python3

# generates directory tree example using graphviz
import pygraphviz as pgv

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from lrgasp.types import Challenge

# directory names are both name and label, files are labels, with unique
# names generate from parent
TEAM_ID = 'my_team_id'

TEAM_MD = "team.json"
EXPERIMENT_MD = "experiment.json"

MOD_ONE = "mod_one"
MOD_ONE_MODELS =  "models.gtf.gz"
MOD_ONE_READS_TRANS_MAP =  "reads_transcripts.tsv.gz"

EXP_ONE_A = "exp_one_A"
EXP_ONE_A_MATRIX = "express.tsv.gz"

EXP_ONE_B = "exp_one_B"
EXP_ONE_B_MATRIX = "express.tsv.gz"

MOD_TWO = "mod_two"
MOD_TWO_MODELS = "models.gtf.gz"

def add_challenge(g, parent, name):
    g.add_node(name, shape='folder')
    if parent is not None:
        g.add_edge(parent, name)

def add_dir(g, parent, name):
    g.add_node(name, shape='folder')
    if parent is not None:
        g.add_edge(parent, name)

def add_file(g, parent, label):
    name = parent + '/' + label
    g.add_node(name, shape='rect', label=label)
    g.add_edge(parent, name)

def add_model_link(g, expr, mod):
    pass

def build_tree(g):
    add_dir(g, None, TEAM_ID)
    add_file(g, TEAM_ID, TEAM_MD)

    add_challenge(g, TEAM_ID, Challenge.iso_detect_finished)
    add_dir(g, Challenge.iso_detect_finished, MOD_ONE)
    add_file(g, MOD_ONE, EXPERIMENT_MD)
    add_file(g, MOD_ONE, MOD_ONE_MODELS)
    add_file(g, MOD_ONE, MOD_ONE_READS_TRANS_MAP)

    add_challenge(g, TEAM_ID, Challenge.iso_quant)
    add_dir(g, Challenge.iso_quant, EXP_ONE_A)
    add_file(g, EXP_ONE_A, EXPERIMENT_MD)
    add_model_link(g, EXP_ONE_A, MOD_ONE)
    add_file(g, EXP_ONE_A, EXP_ONE_A_MATRIX)

    add_dir(g, Challenge.iso_quant, EXP_ONE_B)
    add_file(g, EXP_ONE_B, EXPERIMENT_MD)
    add_model_link(g, EXP_ONE_B, MOD_ONE)
    add_file(g, EXP_ONE_B, EXP_ONE_B_MATRIX)

    add_challenge(g, TEAM_ID, Challenge.iso_detect_finished)
    add_dir(g, Challenge.iso_detect_finished, MOD_TWO)
    add_file(g, MOD_TWO, EXPERIMENT_MD)
    add_file(g, MOD_TWO, MOD_TWO_MODELS)

def mk_graph():
    g = pgv.AGraph()
    build_tree(g)
    g.draw("submit_tree.png", prog="dot", args="-Grankdir=LR")

mk_graph()
